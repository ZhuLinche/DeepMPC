function h=jacobian(obj, p)
%
% computes jacobian using symbolic toolbox (if available)
%

if isempty(which('sym'))
    error('Symbolic Math Toolbox must be installed to support this feature.');
end
        
if nargin==1 || isempty(p)
    p='';
end
if ~ischar(p)
    error('The variable according to which differentiate must be a string.');
end

if length(obj)>1
    h = cell(length(obj),1);
    parfor i=1:length(obj)
        h{i} = obj(i).jacobian(p);
    end
    return
end

if isempty(obj)
   h=[];
    return;
end

% convert function handle to string
s = func2str(obj.Func);

% for anonymous function extract variables inside brackets
c = regexp(s,'^@\([^\)]+\)','match');

if isempty(c)
    error('Conversion to symbolic expression works only for anonymous function.');
end

% remove @ string
cb = strrep(c{1},'@','');

% remove brackets 
c1 = strrep(cb,')','');
c2 = strrep(c1,'(','');

% extract the variables to a cell array
t=regexp(c2,'[a-z_A-Z]+','match');

if length(t)>1 && isempty(p)
    error('The function contains %d variables. You must provide a variable according to differentiate the variables.',length(t));
end

% declare symbolic representation
for i=1:length(t)
    syms(t{i});
end

% get the function as string
f = s(length(c{1})+1:end);

% if there are numbers inside brackets it means we work with vectors and
% must convert them from x(123) to x123
v = regexp(f,'\(\s*[0-9]+\s*\)','match');

if ~isempty(v)
    error('You cannot index vectors x(1), x(2) like, but x1, x2 in order to use Symbolic Toolbox for computing the Jacobian.');
end

% % remove white space
% v1 = strrep(v,'\s','');
% % remove left bracket
% v2 = strrep(v1,'(','');
% % remove right bracket
% v3 = strrep(v2,')','');

% return symbolic expression
try
    w = eval(f);
catch
    error('Did not succeed to convert the function into symbolic expression.');
end

% compute jacobian
if isempty(p)
    g = jacobian(w);
else
    g = jacobian(w,p);
end

% convert to function handle
h = matlabFunction(g);

% store internally
obj.Internal.Jacobian = h;

